?polyroot
coefs <- c(-200^2, 0, 1, 2)
polyroot(coefs)
quit
install.packages("foreign")
# Data Preprocessing
# Importing the dataset
dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
setwd("~/Machine Learning/Real_Estate_Valuation")
# Data Preprocessing
# Importing the dataset
dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
View(dataset)
# Taking care of missing data
dataset$pctsomecol18_24 = ifelse(is.na(dataset$pctsomecol18_24),
0,
dataset$pctsomecol18_24)
dataset$pctemployed16_over = ifelse(is.na(dataset$pctemployed16_over),
0,
dataset$pctemployed16_over)
dataset$pctprivatecoveragealone = ifelse(is.na(dataset$pctprivatecoveragealone),
0,
dataset$pctprivatecoveragealone)
dataset = dataset[, !(names(dataset) %in% c("binnedinc", "geography"))]
# Splitting the dataset into the Training set and Test set
library(caTools)
split = sample.split(dataset$avganncount, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_scaled_cols = scale(training_set[, 1:31])
training_set[, 1:31] = training_scaled_cols
test_set[, 1:31] = scale(test_set[, 1:31], center=attr(training_scaled_cols, 'scaled:center'),
scale=attr(training_scaled_cols, 'scaled:scale'))
# Data Preprocessing
# Importing the dataset
dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
#colSums(is.na(dataset))
# Taking care of missing data
dataset$pctsomecol18_24 = ifelse(is.na(dataset$pctsomecol18_24),
0,
dataset$pctsomecol18_24)
dataset$pctemployed16_over = ifelse(is.na(dataset$pctemployed16_over),
0,
dataset$pctemployed16_over)
dataset$pctprivatecoveragealone = ifelse(is.na(dataset$pctprivatecoveragealone),
0,
dataset$pctprivatecoveragealone)
#colSums(is.na(dataset))
dataset = dataset[, !(names(dataset) %in% c("binnedinc", "geography"))]
# ------------------------------------------------------------------------------
# Splitting the dataset into the Training set and Test set
library(caTools)
split = sample.split(dataset$Store_Sales, SplitRatio = 0.8)
library(caTools)
split = sample.split(dataset$avganncount, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_scaled_cols = scale(training_set[, 1:31])
training_set[, 1:31] = training_scaled_cols
test_set[, 1:31] = scale(test_set[, 1:31], center=attr(training_scaled_cols, 'scaled:center'),
scale=attr(training_scaled_cols, 'scaled:scale'))
mlr_regressor_opt = lm(formula = avganncount ~ .,
data = training_set)
summary(mlr_regressor_opt)
mlr_regressor_opt = lm(formula = avganncound ~ .
-pctbachdeg18_24,
data = training_set)
mlr_regressor_opt = lm(formula = avganncount ~ .
-pctbachdeg18_24,
data = training_set)
summary(mlr_regressor_opt)
# Data Preprocessing
# Importing the dataset
dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
#colSums(is.na(dataset))
# Taking care of missing data
dataset$pctsomecol18_24 = ifelse(is.na(dataset$pctsomecol18_24),
0,
dataset$pctsomecol18_24)
dataset$pctemployed16_over = ifelse(is.na(dataset$pctemployed16_over),
0,
dataset$pctemployed16_over)
dataset$pctprivatecoveragealone = ifelse(is.na(dataset$pctprivatecoveragealone),
0,
dataset$pctprivatecoveragealone)
#colSums(is.na(dataset))
dataset = dataset[, !(names(dataset) %in% c("binnedinc", "geography"))]
# ------------------------------------------------------------------------------
# Multiple Linear Regression
# ------------------------------------------------------------------------------
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$avganncount, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_scaled_cols = scale(training_set[, 1:31])
training_set[, 1:31] = training_scaled_cols
test_set[, 1:31] = scale(test_set[, 1:31], center=attr(training_scaled_cols, 'scaled:center'),
scale=attr(training_scaled_cols, 'scaled:scale'))
#Building the optimal model using Backward Elimination
mlr_regressor_opt = lm(formula = avganncount ~ .,
data = training_set)
summary(mlr_regressor_opt)
# ------------------------------------------------------------------------------
# Multiple Linear Regression
# ------------------------------------------------------------------------------
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$avganncount, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_scaled_cols = scale(training_set[, 1:31])
training_set[, 1:31] = training_scaled_cols
test_set[, 1:31] = scale(test_set[, 1:31], center=attr(training_scaled_cols, 'scaled:center'),
scale=attr(training_scaled_cols, 'scaled:scale'))
#Building the optimal model using Backward Elimination
mlr_regressor_opt = lm(formula = avganncount ~ .,
data = training_set)
summary(mlr_regressor_opt)
mlr_regressor_opt = lm(formula = avganncount ~ .
-pctotherrace,
data = training_set)
summary(mlr_regressor_opt)
