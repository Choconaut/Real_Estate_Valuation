dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
dataset$pctemployed16_over = ifelse(is.na(dataset$pctemployed16_over),
0,
dataset$pctemployed16_over)
dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
dataset$pctemployed16_over = ifelse(is.na(dataset$pctemployed16_over),
mean(dataset$pctemployed16_over, na.rm = TRUE),
dataset$pctemployed16_over)
colSums(is.na(dataset))
dataset = subset(dataset, select = c(target_deathrate,
medincome,
povertypercent,
studypercap,
medianage,
percentmarried,
pcths25_over,
pctbachdeg25_over,
pctemployed16_over,
pctunemployed16_over,
pctprivatecoverage,
pctpubliccoverage,
pctwhite,
pctblack,
pctasian))
colSums(is.na(dataset))
library(caTools)
set.seed(123)
split = sample.split(dataset$avganncount, SplitRatio = 0.8)
library(caTools)
set.seed(123)
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
datatset = dataset[, !dataset$medianage]
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
datatset = dataset[, !dataset$medianage]
datatset = dataset[:, !dataset$medianage]
dataset = subset(dataset, select = -c(medianage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
training_set = subset(training_set, select = -c(medianage))
test_set = subset(test_set, select = -c(medianage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
training_set = subset(training_set, select = -c(pctasian))
test_set = subset(test_set, select = -c(pctasian))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
training_set = subset(training_set, select = -c(pctprivatecoverage))
test_set = subset(test_set, select = -c(pctprivatecoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
training_set = subset(training_set, select = -c(studypercap))
test_set = subset(test_set, select = -c(studypercap))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
training_set = subset(training_set, select = -c(pctpubliccoverage))
test_set = subset(test_set, select = -c(pctpubliccoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Importing the dataset
dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
# Taking care of missing data
#colSums(is.na(dataset))
dataset$pctemployed16_over = ifelse(is.na(dataset$pctemployed16_over),
mean(dataset$pctemployed16_over, na.rm = TRUE),
dataset$pctemployed16_over)
#colSums(is.na(dataset))
# Removing unneeded columns
dataset = subset(dataset, select = c(target_deathrate,
medincome,
povertypercent,
studypercap,
medianage,
percentmarried,
pcths25_over,
pctbachdeg25_over,
pctemployed16_over,
pctunemployed16_over,
pctprivatecoverage,
pctpubliccoverage,
pctwhite,
pctblack,
pctasian))
training_set = subset(training_set, select = -c(pctpubliccoverage))
View(test_set)
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
library(caTools)
set.seed(123)
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medianage
training_set = subset(training_set, select = -c(medianage))
test_set = subset(test_set, select = -c(medianage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctasian
training_set = subset(training_set, select = -c(pctasian))
test_set = subset(test_set, select = -c(pctasian))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctprivatecoverage
training_set = subset(training_set, select = -c(pctprivatecoverage))
test_set = subset(test_set, select = -c(pctprivatecoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove studypercap
training_set = subset(training_set, select = -c(studypercap))
test_set = subset(test_set, select = -c(studypercap))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctpubliccoverage
training_set = subset(training_set, select = -c(pctpubliccoverage))
test_set = subset(test_set, select = -c(pctpubliccoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
training_set = subset(training_set, select = -c(medincome))
test_set = subset(test_set, select = -c(medincome))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
training_set.rm
training_set.rm()
rm(training_set)
rm(test_set)
library(caTools)
set.seed(123)
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
View(datatset)
rm(datatset)
rm(mlr_regressor_opt)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Selecting the optimal team of variables using backward elimination
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medianage
training_set = subset(training_set, select = -c(medianage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctasian
training_set = subset(training_set, select = -c(pctasian))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctprivatecoverage
training_set = subset(training_set, select = -c(pctprivatecoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove studypercap
training_set = subset(training_set, select = -c(studypercap))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctpubliccoverage
training_set = subset(training_set, select = -c(pctpubliccoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medincome
training_set = subset(training_set, select = -c(medincome))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Selecting the optimal team of variables using backward elimination
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medianage
training_set = subset(training_set, select = -c(medianage))
test_set = subset(test_set, select = -c(medianage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctasian
training_set = subset(training_set, select = -c(pctasian))
test_set = subset(test_set, select = -c(pctasian))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctprivatecoverage
training_set = subset(training_set, select = -c(pctprivatecoverage))
test_set = subset(test_set, select = -c(pctprivatecoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove studypercap
training_set = subset(training_set, select = -c(studypercap))
test_set = subset(test_set, select = -c(studypercap))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctpubliccoverage
training_set = subset(training_set, select = -c(pctpubliccoverage))
test_set = subset(test_set, select = -c(pctpubliccoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medincome
training_set = subset(training_set, select = -c(medincome))
test_set = subset(test_set, select = -c(medincome))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
dataset = subset(dataset, select = c(target_deathrate,
povertypercent,
percentmarried,
pcths25_over,
pctbachdeg25_over,
pctemployed16_over,
pctunemployed16_over,
pctwhite,
pctblack))
# ------------------------------------------------------------------------------
# Multiple Linear Regression
# ------------------------------------------------------------------------------
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Selecting the optimal team of variables using backward elimination
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medianage
training_set = subset(training_set, select = -c(medianage))
# ------------------------------------------------------------------------------
# Data Preprocessing
# ------------------------------------------------------------------------------
# Importing the dataset
dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
# Taking care of missing data
#colSums(is.na(dataset))
dataset$pctemployed16_over = ifelse(is.na(dataset$pctemployed16_over),
mean(dataset$pctemployed16_over, na.rm = TRUE),
dataset$pctemployed16_over)
#colSums(is.na(dataset))
# Removing unneeded columns
dataset = subset(dataset, select = c(target_deathrate,
medincome,
povertypercent,
studypercap,
medianage,
percentmarried,
pcths25_over,
pctbachdeg25_over,
pctemployed16_over,
pctunemployed16_over,
pctprivatecoverage,
pctpubliccoverage,
pctwhite,
pctblack,
pctasian))
# ------------------------------------------------------------------------------
# Multiple Linear Regression
# ------------------------------------------------------------------------------
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Selecting the optimal team of variables using backward elimination
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medianage
training_set = subset(training_set, select = -c(medianage))
test_set = subset(test_set, select = -c(medianage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctasian
training_set = subset(training_set, select = -c(pctasian))
test_set = subset(test_set, select = -c(pctasian))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctprivatecoverage
training_set = subset(training_set, select = -c(pctprivatecoverage))
test_set = subset(test_set, select = -c(pctprivatecoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove studypercap
training_set = subset(training_set, select = -c(studypercap))
test_set = subset(test_set, select = -c(studypercap))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctpubliccoverage
training_set = subset(training_set, select = -c(pctpubliccoverage))
test_set = subset(test_set, select = -c(pctpubliccoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medincome
training_set = subset(training_set, select = -c(medincome))
test_set = subset(test_set, select = -c(medincome))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove temp data items
rm(mlr_regressor_opt)
rm(test_set)
rm(training_set)
# Filter dataset based on results of backwards elimination
dataset = subset(dataset, select = c(target_deathrate,
povertypercent,
percentmarried,
pcths25_over,
pctbachdeg25_over,
pctemployed16_over,
pctunemployed16_over,
pctwhite,
pctblack))
# Evaluating Model Performance
mlr_r2_sum = 0
mlr_r2_adj_sum = 0
num_of_ind_vars = 8
for (x in 1:10) {
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
mlr_regressor = lm(formula = target_deathrate ~ .,
data = training_set)
mlr_y_pred = predict(mlr_regressor, newdata = test_set)
mlr_ssr = sum((test_set$target_deathrate - mlr_y_pred) ^ 2)
mlr_sst = sum((test_set$target_deathrate - mean(test_set$target_deathrate)) ^ 2)
mlr_r2 = 1 - (mlr_ssr/mlr_sst)
mlr_r2_sum = mlr_r2_sum + mlr_r2
mlr_r2_adj = 1 - (1 - mlr_r2) * (length(test_set$target_deathrate) - 1) / (length(test_set$target_deathrate) - num_of_ind_vars - 1)
mlr_r2_adj_sum = mlr_r2_adj_sum + mlr_r2_adj
}
mlr_r2_avg = mlr_sum/10
# Evaluating Model Performance
mlr_r2_sum = 0
mlr_r2_adj_sum = 0
num_of_ind_vars = 8
for (x in 1:10) {
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
mlr_regressor = lm(formula = target_deathrate ~ .,
data = training_set)
mlr_y_pred = predict(mlr_regressor, newdata = test_set)
mlr_ssr = sum((test_set$target_deathrate - mlr_y_pred) ^ 2)
mlr_sst = sum((test_set$target_deathrate - mean(test_set$target_deathrate)) ^ 2)
mlr_r2 = 1 - (mlr_ssr/mlr_sst)
mlr_r2_sum = mlr_r2_sum + mlr_r2
mlr_r2_adj = 1 - (1 - mlr_r2) * (length(test_set$target_deathrate) - 1) / (length(test_set$target_deathrate) - num_of_ind_vars - 1)
mlr_r2_adj_sum = mlr_r2_adj_sum + mlr_r2_adj
}
mlr_r2_avg = mlr_r2_sum/10
mlr_r2_adj_avg = mlr_r2_adj_sum/10
print(paste("Average R2: ", mlr_r2_avg))
print(paste("Averge R2 Adj: ", mlr_r2_adj_avg))
# ------------------------------------------------------------------------------
# Data Preprocessing
# ------------------------------------------------------------------------------
# Importing the dataset
dataset = read.csv('cancer_reg.csv', stringsAsFactors = FALSE)
# Taking care of missing data
#colSums(is.na(dataset))
dataset$pctemployed16_over = ifelse(is.na(dataset$pctemployed16_over),
mean(dataset$pctemployed16_over, na.rm = TRUE),
dataset$pctemployed16_over)
#colSums(is.na(dataset))
# Removing unneeded columns
dataset = subset(dataset, select = c(target_deathrate,
medincome,
povertypercent,
studypercap,
medianage,
percentmarried,
pcths25_over,
pctbachdeg25_over,
pctemployed16_over,
pctunemployed16_over,
pctprivatecoverage,
pctpubliccoverage,
pctwhite,
pctblack,
pctasian))
# ------------------------------------------------------------------------------
# Multiple Linear Regression
# ------------------------------------------------------------------------------
# Splitting the dataset into the Training set and Test set
library(caTools)
set.seed(123)
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Selecting the optimal team of variables using backward elimination
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medianage
training_set = subset(training_set, select = -c(medianage))
test_set = subset(test_set, select = -c(medianage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctasian
training_set = subset(training_set, select = -c(pctasian))
test_set = subset(test_set, select = -c(pctasian))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctprivatecoverage
training_set = subset(training_set, select = -c(pctprivatecoverage))
test_set = subset(test_set, select = -c(pctprivatecoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove studypercap
training_set = subset(training_set, select = -c(studypercap))
test_set = subset(test_set, select = -c(studypercap))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove pctpubliccoverage
training_set = subset(training_set, select = -c(pctpubliccoverage))
test_set = subset(test_set, select = -c(pctpubliccoverage))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove medincome
training_set = subset(training_set, select = -c(medincome))
test_set = subset(test_set, select = -c(medincome))
mlr_regressor_opt = lm(formula = target_deathrate ~ .,
data = training_set)
summary(mlr_regressor_opt)
# Remove temp data items
rm(mlr_regressor_opt)
rm(test_set)
rm(training_set)
# Filter dataset based on results of backwards elimination
dataset = subset(dataset, select = c(target_deathrate,
povertypercent,
percentmarried,
pcths25_over,
pctbachdeg25_over,
pctemployed16_over,
pctunemployed16_over,
pctwhite,
pctblack))
# Evaluating Model Performance
mlr_r2_sum = 0
mlr_r2_adj_sum = 0
num_of_ind_vars = 8
for (x in 1:10) {
split = sample.split(dataset$target_deathrate, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
mlr_regressor = lm(formula = target_deathrate ~ .,
data = training_set)
mlr_y_pred = predict(mlr_regressor, newdata = test_set)
mlr_ssr = sum((test_set$target_deathrate - mlr_y_pred) ^ 2)
mlr_sst = sum((test_set$target_deathrate - mean(test_set$target_deathrate)) ^ 2)
mlr_r2 = 1 - (mlr_ssr/mlr_sst)
mlr_r2_sum = mlr_r2_sum + mlr_r2
mlr_r2_adj = 1 - (1 - mlr_r2) * (length(test_set$target_deathrate) - 1) / (length(test_set$target_deathrate) - num_of_ind_vars - 1)
mlr_r2_adj_sum = mlr_r2_adj_sum + mlr_r2_adj
}
mlr_r2_avg = mlr_r2_sum/10
mlr_r2_adj_avg = mlr_r2_adj_sum/10
print(paste("Average R2: ", mlr_r2_avg))
print(paste("Averge R2 Adj: ", mlr_r2_adj_avg))
